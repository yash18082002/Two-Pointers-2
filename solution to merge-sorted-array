// Time Complexity : O(m + n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// use 3 pointers. pick max value and assign to the target array. keep going till pointers are exhausted.

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        if (nums1 == null || nums1.length == 0) {
            return;
        }
        int p1 = m - 1;
        int p2 = n - 1;
        int p3 = m + n - 1;
        while (p1 >= 0 && p2 >= 0) {
            nums1[p3] = Math.max(nums1[p1], nums2[p2]);
            p3--;
            if (nums1[p1] > nums2[p2]) {
                p1--;
            } else {
                p2--;
            }
        }
        while (p2 >= 0) {
            nums1[p3] = nums2[p2];
            p3--;
            p2--;
        }
    }
}
